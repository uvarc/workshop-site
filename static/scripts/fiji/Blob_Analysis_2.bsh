import ij.IJ;
import ij.plugin.Duplicator;
import ij.plugin.frame.RoiManager;
import ij.measure.ResultsTable;
import ij.process.ImageStatistics; 

// open image and create copy
original = IJ.openImage("http://imagej.nih.gov/ij/images/blobs.gif");
original.show();
imp = new Duplicator().run(original);
imp.setTitle("Mask");							// rename the copy			

IJ.run(imp, "Median...", "radius=2");
IJ.run(imp, "Options...", "iterations=1 count=1 black");
IJ.setAutoThreshold(imp, "Default");
IJ.run(imp, "Convert to Mask", "");
IJ.run(imp, "Watershed", "");					// break up particle clumps
IJ.run(imp, "Set Measurements...", "area mean min centroid integrated display redirect=None decimal=3");
IJ.run(imp, "Analyze Particles...", "size=50-Infinity display exclude clear summarize add");
imp.show();

// get default instance of RoiManager(used by ParticleAnalyzer)
rm = RoiManager.getInstance2();
// get list of all ROIs     
rois = rm.getRoisAsArray();
// set measurement options
options = ImageStatistics.MEAN | ImageStatistics.AREA | ImageStatistics.CENTROID;
// create Results Table
rt = new ResultsTable();

// iterate over all ROIs
for (roi : rois) {
	original.setRoi(roi);
	stats = original.getStatistics(options);		// measure
	rt.incrementCounter();							// advance row counter
	// add values to various columns
	rt.addValue("Label", original.getTitle());
	rt.addValue("Mean", stats.mean);
	rt.addValue("Area", stats.area);
	rt.addValue("Centroid X", stats.xCentroid);
	rt.addValue("Centroid Y", stats.yCentroid);
}
rt.show("Blob Results");							// show custom table

// save contents of ResultsTable object as .csv file
homedir = System.getProperty("user.home");							// home directory
outputdir = new File(homedir, "workshop");		// full dir path
resultsfile = new File(outputdir, "blobs.csv").getAbsolutePath();
rt.saveAs(resultsfile)
	